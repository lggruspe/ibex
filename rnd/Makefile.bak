AR = ar
CXX = g++

C++17 =
ifeq ($(CXX),clang++)
	C++17=-std=c++1z
else
	C++17=-std=c++17
endif

CXXFLAGS = -g -Wall -Wextra -Wpedantic -Werror -fpic $(C++17) -I./include -I./src
prefix = /usr/local
bindir = $(prefix)/bin
includedir = $(prefix)/include
libdir = $(prefix)/lib
TESTS = $(patsubst %.cpp,%,$(shell find src -name "*.test.cpp")) 
EXAMPLES = examples/example_c examples/example_cpp

vpath %.cpp src
vpath %.cxx src
vpath %.o build
vpath %.h include src
vpath %.hpp include src

.PHONY:	all
all:	$(TESTS) lib/librndpoc.a lib/librndpoc.so $(EXAMPLES)

lib/librndpoc.a:	build/rndpoc.o
	$(AR) rcs $@ $<

lib/librndpoc.so:	build/rndpoc.o
	$(CXX) -shared -o $@ $<

build/rndpoc.o:	wrapper.cxx rnd.h automaton.hpp handles.hpp nexpr.hpp zsymbols.hpp
	$(CXX) $(CXXFLAGS) -c -o $@ $<

.PHONY:	clean
clean:
	-rm -f vgcore.* build/*.o $(TESTS) $(EXAMPLES)

.PHONY:	install
install:	lib/librndpoc.so lib/librndpoc.a
	mkdir -p "$(prefix)"
	mkdir -p "$(includedir)"
	mkdir -p "$(libdir)"
	cp $^ "$(libdir)"
	cp -r include/* "$(includedir)"

.PHONY:	uninstall
uninstall:
	rm "$(includedir)/rnd.h"
	rm "$(libdir)/librndpoc.so"

#.PHONY:	docker-build
#docker-build:
#	docker rmi -f rnd-dev
#	docker build -t rnd-dev .
#
#.PHONY:	docker-rund
#docker-rund:
#	docker run -d -it -v $$(pwd):/home rnd-dev /bin/sh
#
#.PHONY:	docker-run
#docker-run:
#	docker run -it -v $$(pwd):/home rnd-dev /bin/sh

$(TESTS):	%.test:	%.test.cpp %.hpp
	$(CXX) $(CXXFLAGS) -o $@ $<

.PHONY:	check
check:	all $(TESTS) $(EXAMPLES)
	@for test in $(TESTS) $(EXAMPLES); \
	do \
		./$$test; \
	done

## profiling flags (examples)
# $(CXX) -g -Wall -std=c++17 -I./include -pg -o $@ $< -lm
#
# generating profile analysis:
# ./bin/profile
# gprof -p -b bin/profile gmon.out > analysis.txt

examples/example_c:	examples/example.c lib/librndpoc.so
	gcc -g -Wall -Wextra -Wpedantic -Werror -I./examples -L./lib $< -o $@ -lrndpoc

examples/example_cpp:	examples/example.cpp automaton.hpp nexpr.hpp zsymbols.hpp
	$(CXX) $(CXXFLAGS) -o $@ $<
